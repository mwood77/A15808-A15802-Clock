
ClockDriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803f80  00803f80  000005aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000536  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  00803f80  00803f80  000005aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000618  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019a7  00000000  00000000  00000668  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000015c8  00000000  00000000  0000200f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000061a  00000000  00000000  000035d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  00003bf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c0a  00000000  00000000  00003ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000018d  00000000  00000000  000048d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00004a63  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	dd c1       	rjmp	.+954    	; 0x3c2 <__vector_3>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	4c c2       	rjmp	.+1176   	; 0x4ac <__vector_9>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	64 c2       	rjmp	.+1224   	; 0x4ec <__vector_17>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_clear_bss>:
  40:	2f e3       	ldi	r18, 0x3F	; 63
  42:	a0 e8       	ldi	r26, 0x80	; 128
  44:	bf e3       	ldi	r27, 0x3F	; 63
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a9 39       	cpi	r26, 0x99	; 153
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	30 d0       	rcall	.+96     	; 0xb2 <main>
  52:	6f c2       	rjmp	.+1246   	; 0x532 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <delay_ms>:
}

uint8_t read_eeprom(uint8_t address)
{
	return *((uint8_t*)EEPROM_START + address);
}
  56:	10 92 87 3f 	sts	0x3F87, r1	; 0x803f87 <tick_cnt>
  5a:	10 92 88 3f 	sts	0x3F88, r1	; 0x803f88 <tick_cnt+0x1>
  5e:	20 91 87 3f 	lds	r18, 0x3F87	; 0x803f87 <tick_cnt>
  62:	30 91 88 3f 	lds	r19, 0x3F88	; 0x803f88 <tick_cnt+0x1>
  66:	28 17       	cp	r18, r24
  68:	39 07       	cpc	r19, r25
  6a:	40 f4       	brcc	.+16     	; 0x7c <delay_ms+0x26>
  6c:	00 00       	nop
  6e:	20 91 87 3f 	lds	r18, 0x3F87	; 0x803f87 <tick_cnt>
  72:	30 91 88 3f 	lds	r19, 0x3F88	; 0x803f88 <tick_cnt+0x1>
  76:	28 17       	cp	r18, r24
  78:	39 07       	cpc	r19, r25
  7a:	c0 f3       	brcs	.-16     	; 0x6c <delay_ms+0x16>
  7c:	10 92 87 3f 	sts	0x3F87, r1	; 0x803f87 <tick_cnt>
  80:	10 92 88 3f 	sts	0x3F88, r1	; 0x803f88 <tick_cnt+0x1>
  84:	08 95       	ret

00000086 <write_eeprom>:

void write_eeprom(uint8_t address, uint8_t data)
{
	*((uint8_t*)EEPROM_START + address) = data;
  86:	e8 2f       	mov	r30, r24
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	fc 5e       	subi	r31, 0xEC	; 236
  8c:	60 83       	st	Z, r22
	asm("cli");
  8e:	f8 94       	cli
	CCP = 0x9d;//Unlock self-programming
  90:	8d e9       	ldi	r24, 0x9D	; 157
  92:	84 bf       	out	0x34, r24	; 52
	NVMCTRL_CTRLA = 0x03;//Erase & write to EEPROM
  94:	83 e0       	ldi	r24, 0x03	; 3
  96:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
	asm("sei");
  9a:	78 94       	sei
	while(NVMCTRL_STATUS & 0x02)asm("nop");//Wait till finish
  9c:	80 91 02 10 	lds	r24, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
  a0:	81 ff       	sbrs	r24, 1
  a2:	06 c0       	rjmp	.+12     	; 0xb0 <write_eeprom+0x2a>
  a4:	e2 e0       	ldi	r30, 0x02	; 2
  a6:	f0 e1       	ldi	r31, 0x10	; 16
  a8:	00 00       	nop
  aa:	80 81       	ld	r24, Z
  ac:	81 fd       	sbrc	r24, 1
  ae:	fc cf       	rjmp	.-8      	; 0xa8 <write_eeprom+0x22>
  b0:	08 95       	ret

000000b2 <main>:
}

int main(void)
{
	PORTA_DIR = 0b00110110;
  b2:	86 e3       	ldi	r24, 0x36	; 54
  b4:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
	PORTA_OUT = 0b10000000;
  b8:	80 e8       	ldi	r24, 0x80	; 128
  ba:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x700404>

	PORTB_DIR = 0b00000111;
  be:	87 e0       	ldi	r24, 0x07	; 7
  c0:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
	PORTB_PIN3CTRL = 0b00001000;//Enable pull up on PB3
  c4:	88 e0       	ldi	r24, 0x08	; 8
  c6:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
	PORTB_OUT = 0b00000000;
  ca:	10 92 24 04 	sts	0x0424, r1	; 0x800424 <__TEXT_REGION_LENGTH__+0x700424>
	PORTA_PIN3CTRL = 0b00000010;//32.768K interrupt, enable rising edge interrupt
  ce:	82 e0       	ldi	r24, 0x02	; 2
  d0:	80 93 13 04 	sts	0x0413, r24	; 0x800413 <__TEXT_REGION_LENGTH__+0x700413>
#define CLK_DIV12	0x15
#define CLK_DIV24	0x17
#define CLK_DIV48	0x19
inline void init_clk(uint8_t source, uint8_t divider)
{
	CCP = 0xd8;
  d4:	98 ed       	ldi	r25, 0xD8	; 216
  d6:	94 bf       	out	0x34, r25	; 52
	CLKCTRL_MCLKCTRLA = source;
  d8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
	CCP = 0xd8;//Unlock protected I/O registers
  dc:	94 bf       	out	0x34, r25	; 52
	CLKCTRL_MCLKCTRLB = divider;
  de:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>

}

inline void init_adc()
{
	ADC0_CTRLA = 0b00000101;//Enable ADC, 8bit mode
  e2:	95 e0       	ldi	r25, 0x05	; 5
  e4:	90 93 00 06 	sts	0x0600, r25	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
	ADC0_CTRLB = 0b00000000;//No accumulation
  e8:	10 92 01 06 	sts	0x0601, r1	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
	ADC0_CTRLC = 0b01010100;//Select VDD as reference, CLK=DIV32
  ec:	94 e5       	ldi	r25, 0x54	; 84
  ee:	90 93 02 06 	sts	0x0602, r25	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
	ADC0_CTRLD = 0b00110000;//InitDelay = 16 CLKADC, enable ASDV
  f2:	90 e3       	ldi	r25, 0x30	; 48
  f4:	90 93 03 06 	sts	0x0603, r25	; 0x800603 <__TEXT_REGION_LENGTH__+0x700603>
	ADC0_CTRLE = 0b00000000;//Disable Window comparator
  f8:	10 92 04 06 	sts	0x0604, r1	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
	ADC0_SAMPCTRL = 0b00000000;//Sample length is 2 CLKADC
  fc:	10 92 05 06 	sts	0x0605, r1	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
	ADC0_EVCTRL = 0b00000000;//No event used
 100:	10 92 09 06 	sts	0x0609, r1	; 0x800609 <__TEXT_REGION_LENGTH__+0x700609>
	ADC0_INTCTRL = 0b00000001;//Result ready interrupt
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	90 93 0a 06 	sts	0x060A, r25	; 0x80060a <__TEXT_REGION_LENGTH__+0x70060a>

	ADC0_MUXPOS = 0x06;//select CDS as default
 10a:	26 e0       	ldi	r18, 0x06	; 6
 10c:	20 93 06 06 	sts	0x0606, r18	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
	CLKCTRL_MCLKCTRLB = divider;
}

inline void init_tca0()
{
	TCA0_SPLIT_CTRLA = 0b00001011;//DIV64 enabled, freq = 20M/64/256=1220Hz
 110:	2b e0       	ldi	r18, 0x0B	; 11
 112:	20 93 00 0a 	sts	0x0A00, r18	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
	TCA0_SPLIT_CTRLB = 0b01100000;//Enable high-byte compare 1 & 2 (WO4 & WO5)
 116:	20 e6       	ldi	r18, 0x60	; 96
 118:	20 93 01 0a 	sts	0x0A01, r18	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
	TCA0_SPLIT_CTRLC = 0b00000000;
 11c:	10 92 02 0a 	sts	0x0A02, r1	; 0x800a02 <__TEXT_REGION_LENGTH__+0x700a02>
	TCA0_SPLIT_CTRLD = 0b00000001;//Enable split mode
 120:	90 93 03 0a 	sts	0x0A03, r25	; 0x800a03 <__TEXT_REGION_LENGTH__+0x700a03>
	TCA0_SPLIT_INTCTRL = 0b00000010;//Enable HUNF interrupt
 124:	80 93 0a 0a 	sts	0x0A0A, r24	; 0x800a0a <__TEXT_REGION_LENGTH__+0x700a0a>

	TCA0_SPLIT_HPER = 255;//Only use higher half for PWM & periodic interrupt
 128:	8f ef       	ldi	r24, 0xFF	; 255
 12a:	80 93 27 0a 	sts	0x0A27, r24	; 0x800a27 <__TEXT_REGION_LENGTH__+0x700a27>
	TCA0_SPLIT_LPER = 0;
 12e:	10 92 26 0a 	sts	0x0A26, r1	; 0x800a26 <__TEXT_REGION_LENGTH__+0x700a26>

	TCA0_SPLIT_HCMP1 = 100; //Dimming PWM
 132:	84 e6       	ldi	r24, 0x64	; 100
 134:	80 93 2b 0a 	sts	0x0A2B, r24	; 0x800a2b <__TEXT_REGION_LENGTH__+0x700a2b>
	TCA0_SPLIT_HCMP2 = 100; //Backlight PWM
 138:	80 93 2d 0a 	sts	0x0A2D, r24	; 0x800a2d <__TEXT_REGION_LENGTH__+0x700a2d>
	tick_cnt = 0;
}

uint8_t read_eeprom(uint8_t address)
{
	return *((uint8_t*)EEPROM_START + address);
 13c:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__TEXT_REGION_LENGTH__+0x701400>

	init_clk(CLK_SRC_OSC20M, CLK_DIV1);
	init_adc();
	init_tca0();

	backlight_enable = read_eeprom(0);
 140:	80 93 8a 3f 	sts	0x3F8A, r24	; 0x803f8a <backlight_enable>
	tick_cnt = 0;
}

uint8_t read_eeprom(uint8_t address)
{
	return *((uint8_t*)EEPROM_START + address);
 144:	80 91 01 14 	lds	r24, 0x1401	; 0x801401 <__TEXT_REGION_LENGTH__+0x701401>
	init_clk(CLK_SRC_OSC20M, CLK_DIV1);
	init_adc();
	init_tca0();

	backlight_enable = read_eeprom(0);
	auto_dimming_enable = read_eeprom(1);
 148:	80 93 89 3f 	sts	0x3F89, r24	; 0x803f89 <auto_dimming_enable>
	asm("sei");
 14c:	78 94       	sei
		if(tick_cnt >= 12)//~100Hz
		{
			tick_cnt = 0;

			//Read keys
			if(!BUTTON && (button_cnt>=5) && (button_cnt < 200))//Short press, switch backlight
 14e:	c8 e2       	ldi	r28, 0x28	; 40
 150:	d4 e0       	ldi	r29, 0x04	; 4
					LED_OFF();
					delay_ms(250);
				}
				else//Flash once
				{
					LED_ON();
 152:	0f 2e       	mov	r0, r31
 154:	f5 e2       	ldi	r31, 0x25	; 37
 156:	af 2e       	mov	r10, r31
 158:	f4 e0       	ldi	r31, 0x04	; 4
 15a:	bf 2e       	mov	r11, r31
 15c:	f0 2d       	mov	r31, r0
 15e:	68 94       	set
 160:	55 24       	eor	r5, r5
 162:	52 f8       	bld	r5, 2
					delay_ms(500);
					LED_OFF();
 164:	0f 2e       	mov	r0, r31
 166:	f6 e2       	ldi	r31, 0x26	; 38
 168:	6f 2e       	mov	r6, r31
 16a:	f4 e0       	ldi	r31, 0x04	; 4
 16c:	7f 2e       	mov	r7, r31
 16e:	f0 2d       	mov	r31, r0
				pwm_backlight = backlight_enable?pwm_dimming:0;				
			}
			else
			{
				pwm_dimming = (uint8_t)(pot_value_filtered >> 8);
				if(pwm_dimming < 30)pwm_dimming = 30;
 170:	0f 2e       	mov	r0, r31
 172:	fe e1       	ldi	r31, 0x1E	; 30
 174:	3f 2e       	mov	r3, r31
 176:	f0 2d       	mov	r31, r0
			if(auto_dimming_enable)
			{
				pwm_dimming_auto = (light_value_filtered >> 8) * (pot_value_filtered >> 8);
				pwm_dimming_auto >>= 7;
				if(pwm_dimming_auto < 30)pwm_dimming = 30;
				else if(pwm_dimming_auto > 255)pwm_dimming = 255;
 178:	22 24       	eor	r2, r2
 17a:	2a 94       	dec	r2
			{
				LED_OFF();
			}

			//Output PWM
			TCA0_SPLIT_HCMP1 =(uint8_t)(pwm_dimming_filtered >> 8);//Dimming
 17c:	0f 2e       	mov	r0, r31
 17e:	fb e2       	ldi	r31, 0x2B	; 43
 180:	8f 2e       	mov	r8, r31
 182:	fa e0       	ldi	r31, 0x0A	; 10
 184:	9f 2e       	mov	r9, r31
 186:	f0 2d       	mov	r31, r0
			TCA0_SPLIT_HCMP2 = 255 - (uint8_t)(pwm_backlight_filtered >> 8);//PWM for backlight is inversed
 188:	0f 2e       	mov	r0, r31
 18a:	fd e2       	ldi	r31, 0x2D	; 45
 18c:	cf 2e       	mov	r12, r31
 18e:	fa e0       	ldi	r31, 0x0A	; 10
 190:	df 2e       	mov	r13, r31
 192:	f0 2d       	mov	r31, r0

			ADC0_MUXPOS = 0x06;
 194:	0f 2e       	mov	r0, r31
 196:	f6 e0       	ldi	r31, 0x06	; 6
 198:	ef 2e       	mov	r14, r31
 19a:	fe 2c       	mov	r15, r14
 19c:	f0 2d       	mov	r31, r0
 19e:	0f 2e       	mov	r0, r31
 1a0:	f6 e0       	ldi	r31, 0x06	; 6
 1a2:	4f 2e       	mov	r4, r31
 1a4:	f0 2d       	mov	r31, r0
			ADC0_COMMAND = 0x01;//Start reading sensors
 1a6:	08 e0       	ldi	r16, 0x08	; 8
 1a8:	16 e0       	ldi	r17, 0x06	; 6
	backlight_enable = read_eeprom(0);
	auto_dimming_enable = read_eeprom(1);
	asm("sei");
    while (1) 
    {
		if(tick_cnt >= 12)//~100Hz
 1aa:	80 91 87 3f 	lds	r24, 0x3F87	; 0x803f87 <tick_cnt>
 1ae:	90 91 88 3f 	lds	r25, 0x3F88	; 0x803f88 <tick_cnt+0x1>
 1b2:	0c 97       	sbiw	r24, 0x0c	; 12
 1b4:	d0 f3       	brcs	.-12     	; 0x1aa <main+0xf8>
		{
			tick_cnt = 0;
 1b6:	10 92 87 3f 	sts	0x3F87, r1	; 0x803f87 <tick_cnt>
 1ba:	10 92 88 3f 	sts	0x3F88, r1	; 0x803f88 <tick_cnt+0x1>

			//Read keys
			if(!BUTTON && (button_cnt>=5) && (button_cnt < 200))//Short press, switch backlight
 1be:	88 81       	ld	r24, Y
 1c0:	83 ff       	sbrs	r24, 3
 1c2:	0e c0       	rjmp	.+28     	; 0x1e0 <main+0x12e>
 1c4:	80 91 85 3f 	lds	r24, 0x3F85	; 0x803f85 <button_cnt>
 1c8:	85 50       	subi	r24, 0x05	; 5
 1ca:	83 3c       	cpi	r24, 0xC3	; 195
 1cc:	48 f4       	brcc	.+18     	; 0x1e0 <main+0x12e>
			{
				backlight_enable = !backlight_enable;
 1ce:	61 e0       	ldi	r22, 0x01	; 1
 1d0:	80 91 8a 3f 	lds	r24, 0x3F8A	; 0x803f8a <backlight_enable>
 1d4:	81 11       	cpse	r24, r1
 1d6:	60 e0       	ldi	r22, 0x00	; 0
 1d8:	60 93 8a 3f 	sts	0x3F8A, r22	; 0x803f8a <backlight_enable>
				write_eeprom(0, backlight_enable);
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	53 df       	rcall	.-346    	; 0x86 <write_eeprom>
			}			
			if(button_cnt==200)//Long press, switch auto-dimming
 1e0:	80 91 85 3f 	lds	r24, 0x3F85	; 0x803f85 <button_cnt>
 1e4:	88 3c       	cpi	r24, 0xC8	; 200
 1e6:	61 f5       	brne	.+88     	; 0x240 <main+0x18e>
			{
				auto_dimming_enable = !auto_dimming_enable;
 1e8:	61 e0       	ldi	r22, 0x01	; 1
 1ea:	80 91 89 3f 	lds	r24, 0x3F89	; 0x803f89 <auto_dimming_enable>
 1ee:	81 11       	cpse	r24, r1
 1f0:	60 e0       	ldi	r22, 0x00	; 0
 1f2:	60 93 89 3f 	sts	0x3F89, r22	; 0x803f89 <auto_dimming_enable>
				write_eeprom(1, auto_dimming_enable);
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	46 df       	rcall	.-372    	; 0x86 <write_eeprom>
				if(auto_dimming_enable)//Flash twice
 1fa:	80 91 89 3f 	lds	r24, 0x3F89	; 0x803f89 <auto_dimming_enable>
 1fe:	88 23       	and	r24, r24
 200:	a9 f0       	breq	.+42     	; 0x22c <main+0x17a>
				{
					LED_ON();
 202:	f5 01       	movw	r30, r10
 204:	50 82       	st	Z, r5
					delay_ms(250);
 206:	8a ef       	ldi	r24, 0xFA	; 250
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	25 df       	rcall	.-438    	; 0x56 <delay_ms>
					LED_OFF();
 20c:	f3 01       	movw	r30, r6
 20e:	50 82       	st	Z, r5
					delay_ms(250);
 210:	8a ef       	ldi	r24, 0xFA	; 250
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	20 df       	rcall	.-448    	; 0x56 <delay_ms>
					LED_ON();
 216:	f5 01       	movw	r30, r10
 218:	50 82       	st	Z, r5
					delay_ms(250);
 21a:	8a ef       	ldi	r24, 0xFA	; 250
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	1b df       	rcall	.-458    	; 0x56 <delay_ms>
					LED_OFF();
 220:	f3 01       	movw	r30, r6
 222:	50 82       	st	Z, r5
					delay_ms(250);
 224:	8a ef       	ldi	r24, 0xFA	; 250
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	16 df       	rcall	.-468    	; 0x56 <delay_ms>
 22a:	0a c0       	rjmp	.+20     	; 0x240 <main+0x18e>
				}
				else//Flash once
				{
					LED_ON();
 22c:	f5 01       	movw	r30, r10
 22e:	50 82       	st	Z, r5
					delay_ms(500);
 230:	84 ef       	ldi	r24, 0xF4	; 244
 232:	91 e0       	ldi	r25, 0x01	; 1
 234:	10 df       	rcall	.-480    	; 0x56 <delay_ms>
					LED_OFF();
 236:	f3 01       	movw	r30, r6
 238:	50 82       	st	Z, r5
					delay_ms(500);
 23a:	84 ef       	ldi	r24, 0xF4	; 244
 23c:	91 e0       	ldi	r25, 0x01	; 1
 23e:	0b df       	rcall	.-490    	; 0x56 <delay_ms>
				}
			}
			button_cnt = BUTTON?((button_cnt < 255)?(button_cnt+1):255):0;
 240:	88 81       	ld	r24, Y
 242:	83 fd       	sbrc	r24, 3
 244:	06 c0       	rjmp	.+12     	; 0x252 <main+0x1a0>
 246:	80 91 85 3f 	lds	r24, 0x3F85	; 0x803f85 <button_cnt>
 24a:	8f 3f       	cpi	r24, 0xFF	; 255
 24c:	19 f0       	breq	.+6      	; 0x254 <main+0x1a2>
 24e:	8f 5f       	subi	r24, 0xFF	; 255
 250:	01 c0       	rjmp	.+2      	; 0x254 <main+0x1a2>
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	80 93 85 3f 	sts	0x3F85, r24	; 0x803f85 <button_cnt>

			//Dimming control
			pot_value_filtered = pot_value_filtered - (pot_value_filtered >> 4) + (pot_value << 4);
 258:	80 91 93 3f 	lds	r24, 0x3F93	; 0x803f93 <pot_value_filtered>
 25c:	90 91 94 3f 	lds	r25, 0x3F94	; 0x803f94 <pot_value_filtered+0x1>
 260:	20 91 97 3f 	lds	r18, 0x3F97	; 0x803f97 <pot_value>
 264:	ac 01       	movw	r20, r24
 266:	52 95       	swap	r21
 268:	42 95       	swap	r20
 26a:	4f 70       	andi	r20, 0x0F	; 15
 26c:	45 27       	eor	r20, r21
 26e:	5f 70       	andi	r21, 0x0F	; 15
 270:	45 27       	eor	r20, r21
 272:	84 1b       	sub	r24, r20
 274:	95 0b       	sbc	r25, r21
 276:	f0 e1       	ldi	r31, 0x10	; 16
 278:	2f 9f       	mul	r18, r31
 27a:	80 0d       	add	r24, r0
 27c:	91 1d       	adc	r25, r1
 27e:	11 24       	eor	r1, r1
 280:	80 93 93 3f 	sts	0x3F93, r24	; 0x803f93 <pot_value_filtered>
 284:	90 93 94 3f 	sts	0x3F94, r25	; 0x803f94 <pot_value_filtered+0x1>
			light_value_filtered = light_value_filtered - (light_value_filtered >> 8) + light_value;
 288:	40 91 95 3f 	lds	r20, 0x3F95	; 0x803f95 <light_value_filtered>
 28c:	50 91 96 3f 	lds	r21, 0x3F96	; 0x803f96 <light_value_filtered+0x1>
 290:	20 91 98 3f 	lds	r18, 0x3F98	; 0x803f98 <light_value>
 294:	ba 01       	movw	r22, r20
 296:	62 0f       	add	r22, r18
 298:	71 1d       	adc	r23, r1
 29a:	9b 01       	movw	r18, r22
 29c:	45 2f       	mov	r20, r21
 29e:	55 27       	eor	r21, r21
 2a0:	24 1b       	sub	r18, r20
 2a2:	35 0b       	sbc	r19, r21
 2a4:	20 93 95 3f 	sts	0x3F95, r18	; 0x803f95 <light_value_filtered>
 2a8:	30 93 96 3f 	sts	0x3F96, r19	; 0x803f96 <light_value_filtered+0x1>

			if(auto_dimming_enable)
 2ac:	40 91 89 3f 	lds	r20, 0x3F89	; 0x803f89 <auto_dimming_enable>
 2b0:	44 23       	and	r20, r20
 2b2:	59 f1       	breq	.+86     	; 0x30a <main+0x258>
			{
				pwm_dimming_auto = (light_value_filtered >> 8) * (pot_value_filtered >> 8);
				pwm_dimming_auto >>= 7;
 2b4:	23 2f       	mov	r18, r19
 2b6:	33 27       	eor	r19, r19
 2b8:	49 2f       	mov	r20, r25
 2ba:	55 27       	eor	r21, r21
 2bc:	24 9f       	mul	r18, r20
 2be:	c0 01       	movw	r24, r0
 2c0:	25 9f       	mul	r18, r21
 2c2:	90 0d       	add	r25, r0
 2c4:	34 9f       	mul	r19, r20
 2c6:	90 0d       	add	r25, r0
 2c8:	11 24       	eor	r1, r1
 2ca:	88 0f       	add	r24, r24
 2cc:	89 2f       	mov	r24, r25
 2ce:	88 1f       	adc	r24, r24
 2d0:	99 0b       	sbc	r25, r25
 2d2:	91 95       	neg	r25
 2d4:	80 93 8f 3f 	sts	0x3F8F, r24	; 0x803f8f <pwm_dimming_auto>
 2d8:	90 93 90 3f 	sts	0x3F90, r25	; 0x803f90 <pwm_dimming_auto+0x1>
				if(pwm_dimming_auto < 30)pwm_dimming = 30;
 2dc:	8e 31       	cpi	r24, 0x1E	; 30
 2de:	91 05       	cpc	r25, r1
 2e0:	18 f4       	brcc	.+6      	; 0x2e8 <main+0x236>
 2e2:	30 92 91 3f 	sts	0x3F91, r3	; 0x803f91 <pwm_dimming>
 2e6:	09 c0       	rjmp	.+18     	; 0x2fa <main+0x248>
				else if(pwm_dimming_auto > 255)pwm_dimming = 255;
 2e8:	8f 3f       	cpi	r24, 0xFF	; 255
 2ea:	91 05       	cpc	r25, r1
 2ec:	21 f0       	breq	.+8      	; 0x2f6 <main+0x244>
 2ee:	18 f0       	brcs	.+6      	; 0x2f6 <main+0x244>
 2f0:	20 92 91 3f 	sts	0x3F91, r2	; 0x803f91 <pwm_dimming>
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <main+0x248>
				else pwm_dimming = (uint8_t)pwm_dimming_auto;
 2f6:	80 93 91 3f 	sts	0x3F91, r24	; 0x803f91 <pwm_dimming>
				pwm_backlight = backlight_enable?pwm_dimming:0;				
 2fa:	80 91 8a 3f 	lds	r24, 0x3F8A	; 0x803f8a <backlight_enable>
 2fe:	81 11       	cpse	r24, r1
 300:	80 91 91 3f 	lds	r24, 0x3F91	; 0x803f91 <pwm_dimming>
 304:	80 93 92 3f 	sts	0x3F92, r24	; 0x803f92 <pwm_backlight>
 308:	0e c0       	rjmp	.+28     	; 0x326 <main+0x274>
			}
			else
			{
				pwm_dimming = (uint8_t)(pot_value_filtered >> 8);
				if(pwm_dimming < 30)pwm_dimming = 30;
 30a:	9e 31       	cpi	r25, 0x1E	; 30
 30c:	18 f0       	brcs	.+6      	; 0x314 <main+0x262>
				else pwm_dimming = (uint8_t)pwm_dimming_auto;
				pwm_backlight = backlight_enable?pwm_dimming:0;				
			}
			else
			{
				pwm_dimming = (uint8_t)(pot_value_filtered >> 8);
 30e:	90 93 91 3f 	sts	0x3F91, r25	; 0x803f91 <pwm_dimming>
 312:	02 c0       	rjmp	.+4      	; 0x318 <main+0x266>
				if(pwm_dimming < 30)pwm_dimming = 30;
 314:	30 92 91 3f 	sts	0x3F91, r3	; 0x803f91 <pwm_dimming>
				pwm_backlight = backlight_enable?pwm_dimming:0;
 318:	80 91 8a 3f 	lds	r24, 0x3F8A	; 0x803f8a <backlight_enable>
 31c:	81 11       	cpse	r24, r1
 31e:	80 91 91 3f 	lds	r24, 0x3F91	; 0x803f91 <pwm_dimming>
 322:	80 93 92 3f 	sts	0x3F92, r24	; 0x803f92 <pwm_backlight>
			}

			pwm_backlight_filtered = pwm_backlight_filtered - (pwm_backlight_filtered >> 5) + (pwm_backlight << 3);
 326:	80 91 8d 3f 	lds	r24, 0x3F8D	; 0x803f8d <pwm_backlight_filtered>
 32a:	90 91 8e 3f 	lds	r25, 0x3F8E	; 0x803f8e <pwm_backlight_filtered+0x1>
 32e:	9c 01       	movw	r18, r24
 330:	36 95       	lsr	r19
 332:	27 95       	ror	r18
 334:	32 95       	swap	r19
 336:	22 95       	swap	r18
 338:	2f 70       	andi	r18, 0x0F	; 15
 33a:	23 27       	eor	r18, r19
 33c:	3f 70       	andi	r19, 0x0F	; 15
 33e:	23 27       	eor	r18, r19
 340:	82 1b       	sub	r24, r18
 342:	93 0b       	sbc	r25, r19
 344:	20 91 92 3f 	lds	r18, 0x3F92	; 0x803f92 <pwm_backlight>
 348:	78 e0       	ldi	r23, 0x08	; 8
 34a:	27 9f       	mul	r18, r23
 34c:	80 0d       	add	r24, r0
 34e:	91 1d       	adc	r25, r1
 350:	11 24       	eor	r1, r1
 352:	80 93 8d 3f 	sts	0x3F8D, r24	; 0x803f8d <pwm_backlight_filtered>
 356:	90 93 8e 3f 	sts	0x3F8E, r25	; 0x803f8e <pwm_backlight_filtered+0x1>
			pwm_dimming_filtered = pwm_dimming_filtered - (pwm_dimming_filtered >> 5) + (pwm_dimming << 3);
 35a:	80 91 8b 3f 	lds	r24, 0x3F8B	; 0x803f8b <pwm_dimming_filtered>
 35e:	90 91 8c 3f 	lds	r25, 0x3F8C	; 0x803f8c <pwm_dimming_filtered+0x1>
 362:	9c 01       	movw	r18, r24
 364:	36 95       	lsr	r19
 366:	27 95       	ror	r18
 368:	32 95       	swap	r19
 36a:	22 95       	swap	r18
 36c:	2f 70       	andi	r18, 0x0F	; 15
 36e:	23 27       	eor	r18, r19
 370:	3f 70       	andi	r19, 0x0F	; 15
 372:	23 27       	eor	r18, r19
 374:	82 1b       	sub	r24, r18
 376:	93 0b       	sbc	r25, r19
 378:	20 91 91 3f 	lds	r18, 0x3F91	; 0x803f91 <pwm_dimming>
 37c:	e8 e0       	ldi	r30, 0x08	; 8
 37e:	2e 9f       	mul	r18, r30
 380:	80 0d       	add	r24, r0
 382:	91 1d       	adc	r25, r1
 384:	11 24       	eor	r1, r1
 386:	80 93 8b 3f 	sts	0x3F8B, r24	; 0x803f8b <pwm_dimming_filtered>
 38a:	90 93 8c 3f 	sts	0x3F8C, r25	; 0x803f8c <pwm_dimming_filtered+0x1>

			//Flash LED
			if(pps_flag)
 38e:	80 91 86 3f 	lds	r24, 0x3F86	; 0x803f86 <pps_flag>
 392:	88 23       	and	r24, r24
 394:	29 f0       	breq	.+10     	; 0x3a0 <main+0x2ee>
			{
				LED_ON();
 396:	f5 01       	movw	r30, r10
 398:	50 82       	st	Z, r5
				pps_flag = 0;
 39a:	10 92 86 3f 	sts	0x3F86, r1	; 0x803f86 <pps_flag>
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <main+0x2f2>
			}
			else
			{
				LED_OFF();
 3a0:	f3 01       	movw	r30, r6
 3a2:	50 82       	st	Z, r5
			}

			//Output PWM
			TCA0_SPLIT_HCMP1 =(uint8_t)(pwm_dimming_filtered >> 8);//Dimming
 3a4:	80 91 8c 3f 	lds	r24, 0x3F8C	; 0x803f8c <pwm_dimming_filtered+0x1>
 3a8:	f4 01       	movw	r30, r8
 3aa:	80 83       	st	Z, r24
			TCA0_SPLIT_HCMP2 = 255 - (uint8_t)(pwm_backlight_filtered >> 8);//PWM for backlight is inversed
 3ac:	80 91 8e 3f 	lds	r24, 0x3F8E	; 0x803f8e <pwm_backlight_filtered+0x1>
 3b0:	80 95       	com	r24
 3b2:	f6 01       	movw	r30, r12
 3b4:	80 83       	st	Z, r24

			ADC0_MUXPOS = 0x06;
 3b6:	f7 01       	movw	r30, r14
 3b8:	40 82       	st	Z, r4
			ADC0_COMMAND = 0x01;//Start reading sensors
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	f8 01       	movw	r30, r16
 3be:	80 83       	st	Z, r24
 3c0:	f4 ce       	rjmp	.-536    	; 0x1aa <main+0xf8>

000003c2 <__vector_3>:
uint8_t counter_divider = 0;
uint8_t  out_state = 0;
uint16_t pps_divider = 0;
//32768Hz interrupt
ISR(PORTA_PORT_vect)
{
 3c2:	1f 92       	push	r1
 3c4:	0f 92       	push	r0
 3c6:	0f b6       	in	r0, 0x3f	; 63
 3c8:	0f 92       	push	r0
 3ca:	11 24       	eor	r1, r1
 3cc:	2f 93       	push	r18
 3ce:	8f 93       	push	r24
 3d0:	9f 93       	push	r25
 3d2:	ef 93       	push	r30
 3d4:	ff 93       	push	r31
	if(PORTA_INTFLAGS & 0b00001000)
 3d6:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
 3da:	83 ff       	sbrs	r24, 3
 3dc:	54 c0       	rjmp	.+168    	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
	{
		//32768/(60Hz*4)=136...128
		//So we drop 1 clock every 32768/128=256 clocks
		if(counter_dropper == 255)counter_dropper = 0;
 3de:	80 91 84 3f 	lds	r24, 0x3F84	; 0x803f84 <counter_dropper>
 3e2:	8f 3f       	cpi	r24, 0xFF	; 255
 3e4:	19 f4       	brne	.+6      	; 0x3ec <__vector_3+0x2a>
 3e6:	10 92 84 3f 	sts	0x3F84, r1	; 0x803f84 <counter_dropper>
 3ea:	4d c0       	rjmp	.+154    	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
		else
		{
			counter_dropper++;
 3ec:	8f 5f       	subi	r24, 0xFF	; 255
 3ee:	80 93 84 3f 	sts	0x3F84, r24	; 0x803f84 <counter_dropper>
			if(counter_divider>= 135)
 3f2:	80 91 83 3f 	lds	r24, 0x3F83	; 0x803f83 <counter_divider>
 3f6:	87 38       	cpi	r24, 0x87	; 135
 3f8:	70 f1       	brcs	.+92     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
			{
				counter_divider = 0;
 3fa:	10 92 83 3f 	sts	0x3F83, r1	; 0x803f83 <counter_divider>
				out_state = out_state <= 2?(out_state + 1):0;
 3fe:	80 91 82 3f 	lds	r24, 0x3F82	; 0x803f82 <out_state>
 402:	83 30       	cpi	r24, 0x03	; 3
 404:	08 f0       	brcs	.+2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 406:	45 c0       	rjmp	.+138    	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 408:	8f 5f       	subi	r24, 0xFF	; 255
 40a:	80 93 82 3f 	sts	0x3F82, r24	; 0x803f82 <out_state>
				switch(out_state)
 40e:	81 30       	cpi	r24, 0x01	; 1
 410:	69 f0       	breq	.+26     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 412:	28 f0       	brcs	.+10     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 414:	82 30       	cpi	r24, 0x02	; 2
 416:	89 f0       	breq	.+34     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 418:	83 30       	cpi	r24, 0x03	; 3
 41a:	b1 f0       	breq	.+44     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 41c:	1f c0       	rjmp	.+62     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
				{
					case 0:
					PH1_ON();
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
					PH2_OFF();
 424:	82 e0       	ldi	r24, 0x02	; 2
 426:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
					break;
 42a:	18 c0       	rjmp	.+48     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
					case 1:
					PH1_ON();
 42c:	e5 e2       	ldi	r30, 0x25	; 37
 42e:	f4 e0       	ldi	r31, 0x04	; 4
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	80 83       	st	Z, r24
					PH2_ON();
 434:	82 e0       	ldi	r24, 0x02	; 2
 436:	80 83       	st	Z, r24
					break;
 438:	11 c0       	rjmp	.+34     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
					case 2:
					PH1_OFF();
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
					PH2_ON();
 440:	82 e0       	ldi	r24, 0x02	; 2
 442:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
					break;
 446:	0a c0       	rjmp	.+20     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
					case 3:
					PH1_OFF();
 448:	e6 e2       	ldi	r30, 0x26	; 38
 44a:	f4 e0       	ldi	r31, 0x04	; 4
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	80 83       	st	Z, r24
					PH2_OFF();
 450:	82 e0       	ldi	r24, 0x02	; 2
 452:	80 83       	st	Z, r24
					break;
 454:	03 c0       	rjmp	.+6      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
					default:break;
				}
			}
			else
			{
				counter_divider++;
 456:	8f 5f       	subi	r24, 0xFF	; 255
 458:	80 93 83 3f 	sts	0x3F83, r24	; 0x803f83 <counter_divider>
			}
			if(pps_divider < 32767)
 45c:	80 91 80 3f 	lds	r24, 0x3F80	; 0x803f80 <_edata>
 460:	90 91 81 3f 	lds	r25, 0x3F81	; 0x803f81 <_edata+0x1>
 464:	8f 3f       	cpi	r24, 0xFF	; 255
 466:	2f e7       	ldi	r18, 0x7F	; 127
 468:	92 07       	cpc	r25, r18
 46a:	30 f4       	brcc	.+12     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
				pps_divider++;
 46c:	01 96       	adiw	r24, 0x01	; 1
 46e:	80 93 80 3f 	sts	0x3F80, r24	; 0x803f80 <_edata>
 472:	90 93 81 3f 	sts	0x3F81, r25	; 0x803f81 <_edata+0x1>
 476:	07 c0       	rjmp	.+14     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
			else
			{
				pps_divider = 0;
 478:	10 92 80 3f 	sts	0x3F80, r1	; 0x803f80 <_edata>
 47c:	10 92 81 3f 	sts	0x3F81, r1	; 0x803f81 <_edata+0x1>
				pps_flag = 1;
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	80 93 86 3f 	sts	0x3F86, r24	; 0x803f86 <pps_flag>
			}
		}
	}
	PORTA_INTFLAGS |= 0xff;
 486:	e9 e0       	ldi	r30, 0x09	; 9
 488:	f4 e0       	ldi	r31, 0x04	; 4
 48a:	80 81       	ld	r24, Z
 48c:	8f ef       	ldi	r24, 0xFF	; 255
 48e:	80 83       	st	Z, r24
}
 490:	03 c0       	rjmp	.+6      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
		{
			counter_dropper++;
			if(counter_divider>= 135)
			{
				counter_divider = 0;
				out_state = out_state <= 2?(out_state + 1):0;
 492:	10 92 82 3f 	sts	0x3F82, r1	; 0x803f82 <out_state>
 496:	c3 cf       	rjmp	.-122    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
				pps_flag = 1;
			}
		}
	}
	PORTA_INTFLAGS |= 0xff;
}
 498:	ff 91       	pop	r31
 49a:	ef 91       	pop	r30
 49c:	9f 91       	pop	r25
 49e:	8f 91       	pop	r24
 4a0:	2f 91       	pop	r18
 4a2:	0f 90       	pop	r0
 4a4:	0f be       	out	0x3f, r0	; 63
 4a6:	0f 90       	pop	r0
 4a8:	1f 90       	pop	r1
 4aa:	18 95       	reti

000004ac <__vector_9>:

//1220Hz period
ISR(TCA0_HUNF_vect)
{
 4ac:	1f 92       	push	r1
 4ae:	0f 92       	push	r0
 4b0:	0f b6       	in	r0, 0x3f	; 63
 4b2:	0f 92       	push	r0
 4b4:	11 24       	eor	r1, r1
 4b6:	8f 93       	push	r24
 4b8:	9f 93       	push	r25
 4ba:	ef 93       	push	r30
 4bc:	ff 93       	push	r31
	tick_cnt++;
 4be:	80 91 87 3f 	lds	r24, 0x3F87	; 0x803f87 <tick_cnt>
 4c2:	90 91 88 3f 	lds	r25, 0x3F88	; 0x803f88 <tick_cnt+0x1>
 4c6:	01 96       	adiw	r24, 0x01	; 1
 4c8:	80 93 87 3f 	sts	0x3F87, r24	; 0x803f87 <tick_cnt>
 4cc:	90 93 88 3f 	sts	0x3F88, r25	; 0x803f88 <tick_cnt+0x1>
	TCA0_SPLIT_INTFLAGS |= 0xff;
 4d0:	eb e0       	ldi	r30, 0x0B	; 11
 4d2:	fa e0       	ldi	r31, 0x0A	; 10
 4d4:	80 81       	ld	r24, Z
 4d6:	8f ef       	ldi	r24, 0xFF	; 255
 4d8:	80 83       	st	Z, r24
}
 4da:	ff 91       	pop	r31
 4dc:	ef 91       	pop	r30
 4de:	9f 91       	pop	r25
 4e0:	8f 91       	pop	r24
 4e2:	0f 90       	pop	r0
 4e4:	0f be       	out	0x3f, r0	; 63
 4e6:	0f 90       	pop	r0
 4e8:	1f 90       	pop	r1
 4ea:	18 95       	reti

000004ec <__vector_17>:

ISR(ADC0_RESRDY_vect)
{
 4ec:	1f 92       	push	r1
 4ee:	0f 92       	push	r0
 4f0:	0f b6       	in	r0, 0x3f	; 63
 4f2:	0f 92       	push	r0
 4f4:	11 24       	eor	r1, r1
 4f6:	8f 93       	push	r24
	if(ADC0_MUXPOS == 0x06)//CDS value has been read
 4f8:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
 4fc:	86 30       	cpi	r24, 0x06	; 6
 4fe:	61 f4       	brne	.+24     	; 0x518 <__vector_17+0x2c>
	{
		pot_value = 255 - ADC0_RESL;
 500:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
 504:	80 95       	com	r24
 506:	80 93 97 3f 	sts	0x3F97, r24	; 0x803f97 <pot_value>
		ADC0_MUXPOS = 0x07;//Read Pot value in the next cycle
 50a:	87 e0       	ldi	r24, 0x07	; 7
 50c:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
		ADC0_COMMAND = 0x01;//Start next conversion
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
 516:	07 c0       	rjmp	.+14     	; 0x526 <__vector_17+0x3a>
	}
	else
	{
		light_value = ADC0_RESL;
 518:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
 51c:	80 93 98 3f 	sts	0x3F98, r24	; 0x803f98 <light_value>
		ADC0_MUXPOS = 0x06;//Read CDS in the next cycle
 520:	86 e0       	ldi	r24, 0x06	; 6
 522:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
	}
}
 526:	8f 91       	pop	r24
 528:	0f 90       	pop	r0
 52a:	0f be       	out	0x3f, r0	; 63
 52c:	0f 90       	pop	r0
 52e:	1f 90       	pop	r1
 530:	18 95       	reti

00000532 <_exit>:
 532:	f8 94       	cli

00000534 <__stop_program>:
 534:	ff cf       	rjmp	.-2      	; 0x534 <__stop_program>
